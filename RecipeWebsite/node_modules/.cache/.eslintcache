[{"/workspaces/CS-621/RecipeWebsite/src/index.js":"1","/workspaces/CS-621/RecipeWebsite/src/App.js":"2","/workspaces/CS-621/RecipeWebsite/src/IngredientsPopup.js":"3","/workspaces/CS-621/RecipeWebsite/src/SearchResults.js":"4"},{"size":302,"mtime":1690129856147,"results":"5","hashOfConfig":"6"},{"size":7081,"mtime":1690068234466,"results":"7","hashOfConfig":"6"},{"size":1803,"mtime":1690068234490,"results":"8","hashOfConfig":"6"},{"size":521,"mtime":1690068234506,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d9do49",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/workspaces/CS-621/RecipeWebsite/src/index.js",[],[],"/workspaces/CS-621/RecipeWebsite/src/App.js",["24"],[],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport SearchResults from './SearchResults';\nimport IngredientsPopup from './IngredientsPopup';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nconst App = () => {\n  const [search, setSearch] = useState('');\n  const [results, setResults] = useState([]);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [selectedIngredients, setSelectedIngredients] = useState([]); \n  const [selectedFilters, setSelectedFilters] = useState({\n    diet: '',\n    health: '',\n    cuisineType: '',\n    mealType: '',\n    dishType: '',\n  });\n  const diet = ['balanced', 'high-fiber','high-protein','low-carb', 'low-fat', 'low-sodium'];\n  const health = [\"alcohol-cocktail\",\"alcohol-free\",\"celery-free\",\"crustacean-free\",\"dairy-free\",\"DASH\",\"egg-free\",\"fish-free\",\"fodmap-free\",\"gluten-free\",\"immuno-supportive\",\"keto-friendly\",\"kidney-friendly\",\"kosher\",\"low-fat-abs\",\"low-potassium\",\"low-sugar\",\"lupine-free\",\"Mediterranean\",\"mollusk-free\",\"mustard-free\",\"no-oil-added\",\"paleo\",\"peanut-free\",\"pescatarian\",\"pork-free\",\"red-meat-free\",\"sesame-free\",\"shellfish-free\",\"soy-free\",\"sugar-conscious\",\"sulfite-free\",\"tree-nut-free\",\"vegan\",\"vegetarian\",\"wheat-free\"]\n  const cuisineType = [\"American\",\"Asian\",\"British\",\"Caribbean\",\"Central Europe\",\"Chinese\",\"Eastern Europe\",\"French\",\"Indian\",\"Italian\",\"Japanese\",\"Kosher\",\"Mediterranean\",\"Mexican\",\"Middle Eastern\",\"Nordic\",\"South American\",\"South East Asian\"]\n  const mealType = [\"Breakfast\",\"Dinner\",\"Lunch\",\"Snack\",\"Teatime\"]\n  const dishType = [\"Biscuits and cookies\",\"Bread\",\"Cereals\",\"Condiments and sauces\",\"Desserts\",\"Drinks\",\"Main course\",\"Pancake\",\"Preps\",\"Preserve\",\"Salad\",\"Sandwiches\",\"Side dish\",\"Soup\",\"Starter\",\"Sweets\"]\n\n\n  //useEffect(() => {\n  //  fetchResults();\n  //}, []);\n\n  const fetchResults = async () => {\n    try {\n      const url = `http://127.0.0.1:5000/?query=${search}&diet=${selectedFilters.diet}&health=${selectedFilters.health}&cuisineType=${selectedFilters.cuisineType}&mealType=${selectedFilters.mealType}&dishType=${selectedFilters.dishType}`;\n      const response = await fetch(url);\n      if (response.ok) {\n        const data = await response.json();\n        setResults(data.hits);\n        setFilteredResults(data.hits); \n      } else {\n        console.error('Error:', response.status);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    fetchResults();\n  };\n\n  const handleFilter = (ingredients) => {\n    if (ingredients.length === 0) {\n      setFilteredResults(results);\n    } else {\n      const filtered = results.filter((recipe) => {\n        const recipeIngredients = recipe.recipe.ingredients.map((ingredient) =>\n          ingredient.food.toLowerCase()\n        );\n        const matchedIngredients = ingredients.filter((ingredient) =>\n          recipeIngredients.includes(ingredient.toLowerCase())\n        );\n  \n        return matchedIngredients.length >= 3; \n      });\n      setFilteredResults(filtered);\n    }\n  };\n\n  const handleOpenPopup = () => {\n    setShowPopup(true);\n  };\n\n  const handleClosePopup = () => {\n    setShowPopup(false);\n  };\n\n  const handleDietFilterChange = (selectedOption) => {\n    setSelectedFilters((prevFilters) => ({\n      ...prevFilters,\n      diet: selectedOption.value,\n    }));\n  };\n  \n  const handleHealthFilterChange = (selectedOption) => {\n    setSelectedFilters((prevFilters) => ({\n      ...prevFilters,\n      health: selectedOption.value,\n    }));\n  };\n  \n  const handleCuisineTypeFilterChange = (selectedOption) => {\n    setSelectedFilters((prevFilters) => ({\n      ...prevFilters,\n      cuisineType: selectedOption.value,\n    }));\n  };\n\n  const handleMealTypeFilterChange = (selectedOption) => {\n    setSelectedFilters((prevFilters) => ({\n      ...prevFilters,\n      mealType: selectedOption.value,\n    }));\n  };\n\n  const handleDishTypeFilterChange = (selectedOption) => {\n    setSelectedFilters((prevFilters) => ({\n      ...prevFilters,\n      dishType: selectedOption.value,\n    }));\n  };\n  \n  \n\nreturn (\n  <div className=\"App\">\n    <form onSubmit={handleSearch} className=\"search-form\">\n      <button className=\"filter-button\" type=\"button\" onClick={handleOpenPopup}>\n          What can I make?\n        </button>\n        <input\n          className=\"search-bar\"\n          type=\"text\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          placeholder=\"Search recipes...\"\n        />\n      <button className=\"search-button\" type=\"submit\">\n        Search\n      </button>\n\n      <div className=\"filter-container\">\n        <div className=\"filter-item\">\n        <label htmlFor=\"diet\">Diet:</label>\n          <Dropdown\n            options={diet.map((d) => ({ value: d, label: d }))}\n            onChange={handleDietFilterChange}\n            value={selectedFilters.diet}\n            placeholder=\"Select an option\"\n          />\n        </div>\n\n        <div className=\"filter-item\">\n        <label htmlFor=\"health\">Health:</label>\n        <Dropdown\n          options={health.map((d) => ({ value: d, label: d }))}\n          onChange={handleHealthFilterChange}\n          value={selectedFilters.health}\n          placeholder=\"Select an option\"\n        />\n        </div>\n\n        <div className=\"filter-item\">\n        <label htmlFor=\"cuisineType\">Cuisine Type:</label>\n        <Dropdown\n          options={cuisineType.map((d) => ({ value: d, label: d }))}\n          onChange={handleCuisineTypeFilterChange}\n          value={selectedFilters.cuisineType}\n          placeholder=\"Select an option\"\n        />\n        </div>\n\n        <div className=\"filter-item\">\n        <label htmlFor=\"mealType\">Meal Type:</label>\n        <Dropdown\n          options={mealType.map((d) => ({ value: d, label: d }))}\n          onChange={handleMealTypeFilterChange}\n          value={selectedFilters.mealType}\n          placeholder=\"Select an option\"\n        />\n        </div>\n\n        <div className=\"filter-item\">\n        <label htmlFor=\"dishType\">Dish Type:</label>\n\n        <Dropdown\n          options={dishType.map((d) => ({ value: d, label: d }))}\n          onChange={handleDishTypeFilterChange}\n          value={selectedFilters.dishType}\n          placeholder=\"Select an option\"\n        />\n      </div>\n    </div>\n\n\n        \n      </form>\n      <div className=\"recipes\">\n        {filteredResults.map((recipe) => (\n          <SearchResults\n            key={recipe.recipe.uri}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredientLines}\n            recipeUrl={recipe.recipe.url}\n          />\n        ))}\n      </div>\n      {showPopup && (\n  <IngredientsPopup\n    recipes={results} \n    selectedIngredients={selectedIngredients}\n    setSelectedIngredients={setSelectedIngredients}\n    onClose={handleClosePopup}\n    onFilter={handleFilter}\n  />\n)}\n\n    </div>\n  );\n};\n\nexport default App;\n","/workspaces/CS-621/RecipeWebsite/src/IngredientsPopup.js",[],[],"/workspaces/CS-621/RecipeWebsite/src/SearchResults.js",["25"],[],"import React from 'react';\r\n\r\nconst SearchResults = ({ title, calories, image, ingredients, recipeUrl }) => {\r\n  const handleRecipeClick = event => {\r\n    event.preventDefault();\r\n    window.open(recipeUrl, '_blank');\r\n  };\r\n\r\n  return (\r\n    <div className=\"recipe\" onClick={handleRecipeClick}>\r\n    <a href=\"\">\r\n    <h1 className=\"recipe-title\">\r\n       {title}\r\n    </h1>\r\n    <p>{parseInt(calories)}</p>\r\n    <img className=\"image\" src={image} alt=\"\"  />\r\n    </a>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default SearchResults;\r\n",{"ruleId":"26","severity":1,"message":"27","line":1,"column":17,"nodeType":"28","messageId":"29","endLine":1,"endColumn":26},{"ruleId":"30","severity":1,"message":"31","line":11,"column":5,"nodeType":"32","endLine":11,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]